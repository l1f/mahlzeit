// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: units.sql

package queries

import (
	"context"
)

const addUnit = `-- name: AddUnit :one
insert into units (name)
values ($1)
on conflict (name) do update set name=excluded.name -- no-op that effectively does nothing, but returns the ID as intended
returning id
`

func (q *Queries) AddUnit(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, addUnit, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAllUnits = `-- name: GetAllUnits :many
select id, name
from units
order by name
`

func (q *Queries) GetAllUnits(ctx context.Context) ([]Unit, error) {
	rows, err := q.db.Query(ctx, getAllUnits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
